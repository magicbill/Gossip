gossip Python library
======================

Gossip library provides the infrastructure to build a peer to peer network in order to supervise proclaimed services from multiple network locations to minimize false alarms.

Functionality is divided in three sections:

- crackertable.py : infrastructure to build up a peer (so called babblemouth) and connect to the network
- stationhouse.py : code which allows you to manage service lists and check them periodically
- utils.py : the included default application uses couchDB. This library provides a CouchDBManager to use for configuration and service storage


REQUIREMENTS
*********************
Gossip relies on following libraries and programs:

- M2Crypto >= 1.21.0
- simplejson >= 2.6.1

Additional for couchDB use:
- couchDB >= 1.2
- couchdb-python >= 0.8 


INSTALLING
*********************

Assure that you installed all required software and libraries on your machine. For instructions on installing couchDB visit following site: http://guide.couchdb.org/editions/1/en/source.html

To setup all required databases ensure couchDB is running and execute the 'database_setup.py' script.

You also need to create certificates in order to ensure authentication of the peers. For tutorials on OpenSSL visit following site: http://www.online-tutorials.net/security/openssl-tutorial/tutorials-t-69-207.html#beispiel-openvpn
The keys and certificates must be provided in the configuration. For instructions about where to alter certificate information have a look at the 'database_setup.py' script.



USAGE
*********************

The 'application.py' script offers a sample program with gossip (see script itself for documentation). The application will run a peer and a service checker for HTTP services. 

If ran in default configuration the program will just listen for incoming requests on the provided ports. To enable gossip to connect to one babbler and build up a network you must provide at least one contact data for another peer.

With couchDB you do so by creating a new document in the couchDB database 'gossip_crackertable'. Name it with the identifier of the remote peer. It should contain data like this:

Document 'sample.example.com':

{
	"host":["address1", "address2", ...],
	"port":["port1", "port2", ...],
}	
